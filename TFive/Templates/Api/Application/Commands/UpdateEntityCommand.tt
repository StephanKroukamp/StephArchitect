<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="TFive" #>
<#@ import namespace="TFive" #>
<#@ import namespace="System.Linq" #>
<#@ parameter name="ProjectName" type="System.String" #>
<#@ parameter name="Entity" type="TFive.Entity" #>
using MediatR;
using AutoMapper;
using <#= ProjectName #>.Domain.<#= Entity.Name.Pluralize() #>;

namespace <#= ProjectName #>.Application.<#= Entity.Name.Pluralize() #>.Commands;

public record Update<#= Entity.Name #>Command(<#= string.Join(", ", Entity.Properties.Select(p => p.Type + " " + p.Name)) #>) : IRequest<<#= Entity.Name #>>;

public class Update<#= Entity.Name #>CommandMappingProfile : Profile
{
    public Update<#= Entity.Name #>CommandMappingProfile()
    {
        CreateMap<Update<#= Entity.Name #>Command, <#= Entity.Name #>>();
    }
}

public class Update<#= Entity.Name #>CommandHandler(I<#= Entity.Name #>Repository <#= Entity.Name.ToLower() #>Repository, IMapper mapper) : IRequestHandler<Update<#= Entity.Name #>Command, <#= Entity.Name #>>
{
    public async Task<<#= Entity.Name #>> Handle(Update<#= Entity.Name #>Command request, CancellationToken cancellationToken)
    {
        var <#= Entity.Name.ToLower() #> = mapper.Map<<#= Entity.Name #>>(request);

        <#= Entity.Name.ToLower() #>Repository.Update(<#= Entity.Name.ToLower() #>);

        await <#= Entity.Name.ToLower() #>Repository.SaveChangesAsync(cancellationToken);

        return <#= Entity.Name.ToLower() #>;
    }
}
