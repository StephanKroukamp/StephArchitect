<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="StephArchitect" #>
<#@ import namespace="StephArchitect" #>
<#@ import namespace="System.Linq" #>
<#@ parameter name="ProjectName" type="System.String" #>
<#@ parameter name="Entity" type="StephArchitect.Entity" #>
using MediatR;
using <#= ProjectName #>.Domain.<#= Entity.Name.Pluralize() #>;

namespace <#= ProjectName #>.Application.<#= Entity.Name.Pluralize() #>.Commands;

public record Update<#= Entity.Name #>Command(<#= string.Join(", ", Entity.Properties.Select(p => p.Type + " " + p.Name)) #>) : IRequest<<#= Entity.Name #>>;

public class Update<#= Entity.Name #>CommandHandler(I<#= Entity.Name #>Repository <#= Entity.Name.ToLower() #>Repository) : IRequestHandler<Update<#= Entity.Name #>Command, <#= Entity.Name #>>
{
    public async Task<<#= Entity.Name #>> Handle(Update<#= Entity.Name #>Command request, CancellationToken cancellationToken)
    {
        var <#= Entity.Name.ToLower() #> = await <#= Entity.Name.ToLower() #>Repository.GetByIdAsync(request.Id, cancellationToken)
            ?? throw new Exception($"<#= Entity.Name #> with ID {request.Id} not found.");

<#
        foreach (var property in Entity.Properties.Where(p => p.Name != "Id"))
        {
#>
        <#= Entity.Name.ToLower() #>.<#= property.Name #> = request.<#= property.Name #>;
<#
        }
#>

        <#= Entity.Name.ToLower() #>Repository.Update(<#= Entity.Name.ToLower() #>);

        await <#= Entity.Name.ToLower() #>Repository.SaveChangesAsync(cancellationToken);

        return <#= Entity.Name.ToLower() #>;
    }
}
