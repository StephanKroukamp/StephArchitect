<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="StephArchitect" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="StephArchitect" #>
<#@ parameter name="ProjectName" type="System.String" #>
using Microsoft.AspNetCore.Mvc.Testing;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Moq;
using Respawn;
using <#= ProjectName #>.Persistence;

namespace <#= ProjectName #>.Tests;

[SetUpFixture]
public class TestSetup
{
    private static IConfiguration? _configuration;
    private static IServiceScopeFactory? _scopeFactory;
    private static Checkpoint? _checkpoint;

    [OneTimeSetUp]
    public void RunBeforeAnyTests()
    {
        var builder = new ConfigurationBuilder()
            .SetBasePath(Directory.GetCurrentDirectory())
            .AddJsonFile("appsettings.test.json", false, true)
            .AddEnvironmentVariables();

        _configuration = builder.Build();

        

        _configuration = builder.Build();

        var webApplicationFactory = new WebApplicationFactory<Program>()
            .WithWebHostBuilder(webHostBuilder =>
            {
                webHostBuilder.ConfigureAppConfiguration((_, config) => { config.AddConfiguration(_configuration); });

                webHostBuilder.ConfigureServices(services => 
                {
                    var hostingEnvironment = Mock.Of<Microsoft.AspNetCore.Hosting.IWebHostEnvironment>(w =>
                        w.EnvironmentName == "Test" &&
                        w.ApplicationName == "<#= ProjectName #>.Api");

                    services.AddSingleton(hostingEnvironment);

                    var dbContextDescriptor = services.SingleOrDefault(
                        d => d.ServiceType == typeof(DbContextOptions<<#= ProjectName #>DbContext>));
                    services.Remove(dbContextDescriptor!);

                    var ctx = services.SingleOrDefault(d => d.ServiceType == typeof(<#= ProjectName #>DbContext));
                    services.Remove(ctx!);

                    services.AddDbContext<<#= ProjectName #>DbContext>(opt =>
                    {
                        opt.UseSqlServer(_configuration.GetConnectionString("DefaultConnection"),
                            x => x
                                .MigrationsHistoryTable("__EFMigrationsHistory", "<#= ProjectName.ToLower() #>")
                                .MigrationsAssembly(typeof(<#= ProjectName #>DbContext).Assembly.FullName)
                        );
                    });
                });
            });

        var serviceProvider = webApplicationFactory.Services;

        _scopeFactory = serviceProvider.GetService<IServiceScopeFactory>();

        EnsureProjectDatabase();

        _checkpoint = new Checkpoint
        {
            // TablesToIgnore = new[] {
            //     "__EFMigrationsHistory", nameof(User), nameof(LeadOrigin), nameof(LeadChannel),
            //     nameof(LeadOriginChannel), nameof(LeadStatus), nameof(LeadStatusReasonLink), nameof(LookupValue),
            //     nameof(StockColour), nameof(Flag), nameof(FlagReasonLink), nameof(Reason), nameof(DuplicateReason),
            //     nameof(CommentType), nameof(AppSetting), nameof(LeadRelatedMarketValueRemovalReason),
            //     nameof(UserQueue),
            // }
        };
    }

    private static void EnsureProjectDatabase()
    {
        if (_scopeFactory is null)
        {
            throw new Exception("Scope Factory is not registered");
        }

        using var scope = _scopeFactory.CreateScope();
        
        using var <#=ProjectName.ToLower()#>DbContext = scope.ServiceProvider.GetService<<#=ProjectName#>DbContext>()
                                    ?? throw new Exception("DbContext not registered");

        <#=ProjectName.ToLower()#>DbContext.Database.EnsureCreated();
    }

    public static IServiceScope GetServiceScope()
    {
        return _scopeFactory!.CreateScope();
    }

    public static async Task ResetState()
    {
        if (_checkpoint is not null)
        {
            if (_configuration is null)
            {
                throw new InvalidOperationException("Configuration not setup correctly");
            }

            await _checkpoint.Reset(_configuration.GetConnectionString("DefaultConnection"));
        }
    }
}