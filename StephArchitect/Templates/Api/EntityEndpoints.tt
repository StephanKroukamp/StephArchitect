<#@ template language="C#" debug="false" hostspecific="true" #>
<#@ output extension=".cs" #>
<#@ parameter name="ProjectName" type="System.String" #>
<#@ parameter name="EntityName" type="System.String" #>
<#@ parameter name="PluralEntityName" type="System.String" #>
using MediatR;
using Microsoft.AspNetCore.Http.HttpResults;
using <#= ProjectName #>.Domain.<#= PluralEntityName #>;
using <#= ProjectName #>.Application.<#= PluralEntityName #>.Commands;
using <#= ProjectName #>.Application.<#= PluralEntityName #>.Queries;

namespace <#= ProjectName #>.Api.<#= PluralEntityName #>;

public static class <#= EntityName #>Endpoints
{
    public static void Map<#= EntityName #>Endpoints(this WebApplication app)
    {
        var endpoints = app
            .MapGroup("/<#= PluralEntityName #>")
            .WithTags("<#= PluralEntityName #>");

        endpoints.MapGet("/", GetAll<#= PluralEntityName #>);
        endpoints.MapGet("/{id}", Get<#= EntityName #>ById);
        endpoints.MapPost("/", Create<#= EntityName #>);
        endpoints.MapPut("/{id}", Update<#= EntityName #>ById);
        endpoints.MapDelete("/{id}", Delete<#= EntityName #>ById);
    }

    private static Results<Ok<string>, NotFound> GetAll<#= PluralEntityName #>() =>
        TypedResults.Ok("");

    private static async Task<IResult> Get<#= EntityName #>ById(int id, IMediator mediator)
    {
        var result = await mediator.Send(new Get<#= EntityName #>ByIdQuery(id));

        return Results.Ok(result);
    }

    private static async Task<IResult> Create<#= EntityName #> (Create<#= EntityName #>Command command, IMediator mediator) 
    {
        var result = await mediator.Send(command);

        return Results.Created($"/<#= EntityName.ToLower() #>/{result.Id}", result);
    }

    private static Results<Ok<string>, NotFound> Update<#= EntityName #>ById() =>
        TypedResults.Ok("");

    private static Results<Ok<string>, NotFound> Delete<#= EntityName #>ById() =>
        TypedResults.Ok("");
}
