<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ parameter name="ProjectName" type="System.String" #>
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Design;
using Microsoft.Extensions.Configuration;

namespace <#= ProjectName #>.Persistence;

public class <#= ProjectName #>DbContextFactory : IDesignTimeDbContextFactory<<#= ProjectName #>DbContext>
{
    public <#= ProjectName #>DbContext CreateDbContext(string[] args)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(Directory.GetCurrentDirectory())
            .AddJsonFile("appsettings.json", optional: false, reloadOnChange: true)
            .Build();

        var connectionString = config.GetConnectionString("DefaultConnection")
            ?? throw new ArgumentException("Db connection string is not set");

        var optionsBuilder = new DbContextOptionsBuilder<<#= ProjectName #>DbContext>();
        
        optionsBuilder.UseSqlServer(connectionString,
            x => x
                .MigrationsHistoryTable("__EFMigrationsHistory", "<#=ProjectName.ToLower()#>")
                .MigrationsAssembly(typeof(<#= ProjectName #>DbContext).Assembly.FullName));


        return new <#= ProjectName #>DbContext(optionsBuilder.Options);
    }
}

public class <#= ProjectName #>DbContext(DbContextOptions<<#= ProjectName #>DbContext> options) : DbContext(options)
{
    private const string Schema = "<#= ProjectName.ToLower() #>";
    
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.HasDefaultSchema(Schema);

        modelBuilder.ApplyConfigurationsFromAssembly(typeof(DependencyInjection).Assembly);
    }
}
